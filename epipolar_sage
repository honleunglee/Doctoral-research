################################
# PACKAGES AND POLYNOMIAL RING #
################################

from collections import deque
R.<u1,u2,u3,u4,u5,u6,u7,u8,u9,v1,v2,v3,v4,v5,v6,v7,v8,v9> = PolynomialRing(QQ,18)

#######################
# AUXILIARY FUNCTIONS #
#######################

# Turn a vector of length 9 into a 3x3 matrix K
def reshape3x3(K):
    return matrix([[K[0,0], K[0,1], K[0,2]],[K[0,3], K[0,4], K[0,5]],[K[0,6], K[0,7], K[0,8]]]);

# Check if some 2x2 minor of a 3x3 matrix is nonzero
def twoBytwo(K):
    twoMinor = K.minors(2);
    if (twoMinor == [0]*(len(twoMinor))):
        return False
    else:
        return True

# Extract the coefficients of a linear form and store in a list
def extract(poly):
    bb = [0]*9;
    que = deque([0]*8 + [1]);
    for i in range(8,-1,-1):
        bb[i] = poly(u1=que[0],u2=que[1],u3=que[2],u4=que[3],u5=que[4],u6=que[5],u7=que[6],u8=que[7],u9=que[8]);
        que.append(0);
        que.popleft();
    return bb
    
# Compute dot product of two lists of same length
def dot_product(a,b):
    return sum( [a[i]*b[i] for i in range(len(b))] )

##################
# MAIN ALGORITHM #
##################

# INPUTS:
# m = number of pairs of correspondences
# X,Y = m-by-2 matrices recording the correspondences
# OUTPUT: 
# True if there is a fundamental matrix relating them,
# False if not.
def main(Y,X,m):
    Z = matrix(QQ, m, 9);
    ones = vector(QQ,[1]*m)
    X = X.augment(ones);
    Y = Y.augment(ones);
    for i in range(m):
        Z[i,:] = Y[i,:].tensor_product(X[i,:]);
    N = Z.right_kernel().matrix();  
    N1 = reshape3x3(N[0,:]);
    rr = Z.rank();
    nul = 9-rr;
    
    # Parametrize the kernel of Z matrix 
    if nul == 1:
        M = u1*N1;
    elif nul == 2:
        N2 = reshape3x3(N[1,:]);
        M = u1*N1 + u2*N2;   
    elif nul == 3:
        N2 = reshape3x3(N[1,:]);
        N3 = reshape3x3(N[2,:]);   
        M = u1*N1 + u2*N2 + u3*N3;
    elif nul == 4:
        N2 = reshape3x3(N[1,:]);
        N3 = reshape3x3(N[2,:]);   
        N4 = reshape3x3(N[3,:]);
        M = u1*N1 + u2*N2 + u3*N3 + u4*N4;  
    elif nul == 5:
        N2 = reshape3x3(N[1,:]);
        N3 = reshape3x3(N[2,:]);   
        N4 = reshape3x3(N[3,:]);
        N5 = reshape3x3(N[4,:]);
        M = u1*N1 + u2*N2 + u3*N3 + u4*N4 + u5*N5;
    elif nul == 6:
        N2 = reshape3x3(N[1,:]);
        N3 = reshape3x3(N[2,:]);   
        N4 = reshape3x3(N[3,:]);
        N5 = reshape3x3(N[4,:]);
        N6 = reshape3x3(N[5,:]);
        M = u1*N1 + u2*N2 + u3*N3 + u4*N4 + u5*N5 + u6*N6;
    elif nul == 7:
        N2 = reshape3x3(N[1,:]);
        N3 = reshape3x3(N[2,:]);   
        N4 = reshape3x3(N[3,:]);
        N5 = reshape3x3(N[4,:]);
        N6 = reshape3x3(N[5,:]);
        N7 = reshape3x3(N[6,:]);
        M = u1*N1 + u2*N2 + u3*N3 + u4*N4 + u5*N5 + u6*N6 + u7*N7;
    else:
        N2 = reshape3x3(N[1,:]);
        N3 = reshape3x3(N[2,:]);   
        N4 = reshape3x3(N[3,:]);
        N5 = reshape3x3(N[4,:]);
        N6 = reshape3x3(N[5,:]);
        N7 = reshape3x3(N[6,:]);
        N8 = reshape3x3(N[7,:]);
        M = u1*N1 + u2*N2 + u3*N3 + u4*N4 + u5*N5 + u6*N6 + u7*N7 + u8*N8; 

    p = det(M);
    
    print 'Rank of Z is: ' + repr(rr) + '\n';
    print 'Kernel of Z is generated by: \n' + repr(N) + '\n';
    print 'Determinant of M(u) is: \n' + repr(p) + '\n';
    
    if p == 0:
        return twoBytwo(M)
    else:
        try:
            pp = factor(p)[0][0];
            if (pp^3 == p):
                b = extract(pp);
                v_vec = [v1,v2,v3,v4,v5,v6,v7,v8,v9];
                thing1 = dot_product(b,b);
                thing2 = dot_product(b,v_vec);
                term = [0]*9;
                for i in range(9):
                    term[i] = v_vec[i] - (thing2/thing1)*b[i];
                newM = M(u1=term[0],u2=term[1],u3=term[2],u4=term[3],u5=term[4],u6=term[5],u7=term[6],u8=term[7],u9=term[8]);
                return twoBytwo(newM)
            else:
                return True
        except:
            return True

#Examine the examples in the paper.
#Example 13 
Y = matrix([ [-3,5],[5,-2],[8,-9],[11,-16],[14,-23],[17,-30],[20,-37]  ])
X = matrix([ [10,4],[-7,0],[-4,4],[-7,1],[0,-1],[1,-8],[1,-4] ])
main(Y,X,7)

#Example 19
Y = matrix([ [-2,-3],[-2,-1],[-2,2],[2,-1],[2,0],[6,-5],[7,-6]  ])
X = matrix([ [2,0],[3,-2],[4,-4],[5,-6],[6,-8],[-3,-2],[2,-2] ])
main(Y,X,7)

#Example 20(i)
Y = matrix([ [0,1],[1,0],[2,5],[3,-5/12],[4,7],[5,-11/8],[6,9]  ])
X = matrix([ [1/5,-1],[-1,-7],[-1/2,0],[-2,-12],[-57/4,8],[2,8],[0,-1/9] ])
main(Y,X,7)

#Example 20(ii)
Y = matrix([ [1,0],[1/3,0],[1/3,-1],[1,-1],[1/2,-1],[4,-2],[2,-2]  ])
X = matrix([ [-1,0],[-3,0],[6,3],[0,1],[2,2],[0,1/2],[1/2,1] ])
main(Y,X,7)
