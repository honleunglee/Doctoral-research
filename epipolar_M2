-----------------
-- Declaration --
-----------------
R = QQ[u_1..u_9,v_1..v_9];

-------------------------
-- Auxiliary Functions --
-------------------------
-- Compute dot product of two lists of same length
dot = (list1,list2,length) -> (
      sum := 0;
	    for i from 0 to (length-1) do sum = sum + (list1_i)*(list2_i);
	    sum
      )

-- Turn a list of length 9 into a 3x3 matrix K over ring R
reshape3 = K -> (
           substitute(matrix{{K_0,K_1,K_2},{K_3,K_4,K_5},
		          {K_6,K_7,K_8}},R)
           )
		   
-- Check if some 2x2 minor of a 3x3 matrix is nonzero
twoBytwo = K -> (
           twoMinor := minors(2,K);
		       if twoMinor == 0 then false else true
           )

-- Extract the coefficients of a linear form and store in a list
extract = poly -> (
		  ID := id_(ZZ^(18));
		  for i from 0 to 8 list sub(poly,transpose(submatrix(ID,{i})))		  
		  )
		  
-- Generate the matrix Z (m by 9) from Y,X (m by 2)
genZ = (Y,X,m) -> (
       ones := map(QQ^m,QQ^1,(i,j)->1);
	     X = X | ones;
	     X = transpose X;
	     Y = Y | ones;
	     Y = transpose Y;
	     Z = transpose(submatrix(Y,{0})**submatrix(X,{0}));
	     for i from 1 to (m-1) do Z = Z || transpose(submatrix(Y,{i})**submatrix(X,{i}));
       Z
		   )
		
-- Convert a basis vector of kernel(Matrix) into a list
-- this basis vector must have length 9
conKer = basis -> (
         for i from 0 to 8 list basis_i
         )
		 
-- Parametrize the kernel(Matrix) given the basis vectors of the kernel 
-- the nullity
parKer = (KKK,nul) -> (
	       N1 := reshape3(conKer(KKK_0));
         if nul == 1 then M1 := u_1*N1
         else if nul == 2 then (
            N22 := reshape3(conKer(KKK_1));
            M2 := u_1*N1 + u_2*N22
         )		  
         else if nul == 3 then (
            N32 := reshape3(conKer(KKK_1));
            N33 := reshape3(conKer(KKK_2));   
            M3 := u_1*N1 + u_2*N32 + u_3*N33
		     )
         else if nul == 4 then (
            N42 := reshape3(conKer(KKK_1));
            N43 := reshape3(conKer(KKK_2)); 
		        N44 := reshape3(conKer(KKK_3));
            M4 := u_1*N1 + u_2*N42 + u_3*N43 + u_4*N44
         )		  
         else if nul == 5 then (
            N52 := reshape3(conKer(KKK_1));
            N53 := reshape3(conKer(KKK_2)); 
		        N54 := reshape3(conKer(KKK_3));
		        N55 := reshape3(conKer(KKK_4));
            M5 := u_1*N1 + u_2*N52 + u_3*N53 + u_4*N54 + u_5*N55
		     )
         else if nul == 6 then (
            N62 := reshape3(conKer(KKK_1));
            N63 := reshape3(conKer(KKK_2)); 
		        N64 := reshape3(conKer(KKK_3));
		        N65 := reshape3(conKer(KKK_4));
		        N66 := reshape3(conKer(KKK_5));
            M6 := u_1*N1 + u_2*N62 + u_3*N63 + u_4*N64 + u_5*N65 + u_6*N66
		     )
         else if nul == 7 then (
            N72 := reshape3(conKer(KKK_1));
            N73 := reshape3(conKer(KKK_2)); 
		        N74 := reshape3(conKer(KKK_3));
		        N75 := reshape3(conKer(KKK_4));
		        N76 := reshape3(conKer(KKK_5));
		        N77 := reshape3(conKer(KKK_6));
            M7 := u_1*N1 + u_2*N72 + u_3*N73 + u_4*N74 + u_5*N75 + u_6*N76 + u_7*N77
		     )
         else (
            N82 := reshape3(conKer(KKK_1));
            N83 := reshape3(conKer(KKK_2)); 
		        N84 := reshape3(conKer(KKK_3));
		        N85 := reshape3(conKer(KKK_4));
		        N86 := reshape3(conKer(KKK_5));
		        N87 := reshape3(conKer(KKK_6));
		        N88 := reshape3(conKer(KKK_7));
            M8 := u_1*N1 + u_2*N82 + u_3*N83 + u_4*N84 + u_5*N85 + u_6*N86 + u_7*N87 + u_8*N88
		     )
         )
		  
--------------------
-- Main Algorithm --
--------------------		  
-- INPUTS:
-- m = number of pairs of correspondences
-- X,Y = m-by-2 matrices recording the correspondences
-- OUTPUT: 
-- True if there is a fundamental matrix relating them,
-- False if not.

main = (Y,X,m) -> (
       Zmatrix := genZ(Y,X,m);
	     kernelOfZ := ker Zmatrix;
	     rankz := rank Zmatrix;
	     nullz := 9 - rankz;
       pm := parKer(kernelOfZ,nullz); 
	     p := det(pm);
    
       << "Rank of Z is: " << rankz << "\n";
	     << "Determinant of M(u) is: \n" << toString p << "\n";
	   
	     if p == 0 then twoBytwo(pm) else (
            try (
                factorP := factor p;
			        	pp := factorP#0#0;
                if pp^3 == p then (
                   b := extract(pp);
                   vVec := {v_1,v_2,v_3,v_4,v_5,v_6,v_7,v_8,v_9};
                   thing1 := dot(b,b,9);
                   thing2 := dot(b,vVec,9);
                   term := {};
                   for i from 0 to 8 do term = append(term,vVec_i - (thing2/thing1)*b_i);
                   newM := sub(pm,{u_1=>term_0,u_2=>term_1,u_3=>term_2,u_4=>term_3,u_5=>term_4,u_6=>term_5,u_7=>term_6,u_8=>term_7,u_9=>term_8});
                   twoBytwo(newM)
				        )
                else true
				    )
            else true
	     )
       )


	   
-- Examine the examples in the paper.
-- Example 13 
Y = matrix{ {-3,5},{5,-2},{8,-9},{11,-16},{14,-23},{17,-30},{20,-37}  }
X = matrix{ {10,4},{-7,0},{-4,4},{-7,1},{0,-1},{1,-8},{1,-4} }
main(Y,X,7)

-- Example 19
Y = matrix{ {-2,-3},{-2,-1},{-2,2},{2,-1},{2,0},{6,-5},{7,-6}  }
X = matrix{ {2,0},{3,-2},{4,-4},{5,-6},{6,-8},{-3,-2},{2,-2} }
main(Y,X,7)

-- Example 20(i)
Y = matrix{ {0,1},{1,0},{2,5},{3,-5/12},{4,7},{5,-11/8},{6,9}  }
X = matrix{ {1/5,-1},{-1,-7},{-1/2,0},{-2,-12},{-57/4,8},{2,8},{0,-1/9} }
main(Y,X,7)

-- Example 20(ii)
Y = matrix{ {1,0},{1/3,0},{1/3,-1},{1,-1},{1/2,-1},{4,-2},{2,-2}  }
X = matrix{ {-1,0},{-3,0},{6,3},{0,1},{2,2},{0,1/2},{1/2,1} }
main(Y,X,7)
